<?php


namespace app\models\config;


use app\models\db\ConfigRecord;
use romi45\yii2jsonvalidator\JsonValidator;
use yii\base\InvalidConfigException;
use yii\base\Model;

/**
 * Class AdminConfigModel
 * @package app\models\config
 *
 * Property name category__
 * @property string $name
 * @property string $defaultLanguage
 * @property array $selectableLanguages
 * @property array $topMenuStructure
 * @property array $leftMenuStructure
 * @property array $colorTheme
 * @property string $brandLogo
 */
class AdminConfigModel extends Model
{
    /**
     * @var $configArray ConfigRecord[][]
     */
    private array $configArray;

    public string $moduleName;

    public function __construct($moduleName, $config = [])
    {
        $this->moduleName = $moduleName;
        $this->configArray = [];
        parent::__construct($config);
    }

    public function attributeLabels() : array
    {
        return parent::attributeLabels(); // TODO: Change the autogenerated stub
    }

    public function rules() : array
    {
        return parent::rules(); // TODO: Change the autogenerated stub
    }

    public function load($data, $formName = null) : bool
    {
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    public function __set($name, $value)
    {
        $this->initRecord($name);
        $isJson = (new JsonValidator())->validate($value);
        if($isJson){
            $jsonValue = $value;
        }else{
            $jsonValue = json_encode($value, JSON_THROW_ON_ERROR);
        }
        $this->configArray[$this->moduleName][$name]->value = $jsonValue;
    }

    public function __get($name) : ?string
    {
        $this->initRecord($name);
        return $this->configArray[$this->moduleName][$name]->value;
    }

    private function initRecord($name){
        if(!isset($this->configArray[$this->moduleName][$name])){
            $record = ConfigRecord::findOne(['module' => $this->moduleName, 'name' => $name]);
            if($record === null){
                throw new InvalidConfigException("$name in {$this->moduleName} not a initalized config value in DB");
            }else{
                $this->configArray[$this->moduleName][$name] = $record;
            }
        }
    }
    public function save() : void
    {
        foreach ($this->configArray as $moduleName => $items){
            foreach ($items as $name => $record){
                $record->save(true);
            }
        }
    }
}